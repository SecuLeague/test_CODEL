---
- name: Vérifier le statut du job Jenkins et gérer les interfaces Proxmox
  hosts: localhost
  gather_facts: no
  vars:
    url: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"
    vault_path: "secret/data/jenkins/proxmox13"
    job_name: "CODEL%201.0.0%20-%20Deploy%20ADC"  # Définir le job_name avant son utilisation

  tasks:
    - name: Récupérer les secrets depuis Vault (KV v2)
      community.hashi_vault.vault_read:
        path: "{{ vault_path }}"
        url: "{{ url }}"
        token: "{{ lookup('env', 'VAULT_TOKEN') }}"
      register: secrets

    - name: Debug - Afficher le contenu des secrets
      debug:
        var: secrets
        verbosity: 0

    - name: Extraire les secrets récupérés
      set_fact:
        jenkins_url: "{{ secrets.data.data.data.jenkins_url }}"
        jenkins_api_token: "{{ secrets.data.data.data.jenkins_api_token }}"
        jenkins_user: "{{ secrets.data.data.data.jenkins_user }}"

    - name: Debug - Afficher les variables extraites
      debug:
        msg:
          - "Jenkins URL: {{ jenkins_url }}"
          - "Jenkins User: {{ jenkins_user }}"
          - "Jenkins API Token: {{ jenkins_api_token | default('Non défini', true) }}"

    - name: Vérifier que l'URL de l'API Jenkins est bien définie
      assert:
        that:
          - jenkins_url is defined and jenkins_url | length > 0
        fail_msg: "L'URL de l'API Jenkins n'est pas définie correctement. Vérifiez la variable jenkins_url."

    - name: Définir l'URL de l'API Jenkins pour le job
      set_fact:
        api_endpoint: "{{ jenkins_url }}/job/{{ job_name }}/lastBuild/consoleText/api/json"  # Utilisation de job_name défini en haut

    - name: Obtenir le statut du log du job Jenkins
      uri:
        url: "{{ api_endpoint }}"
        method: GET
        return_content: yes
        status_code: 200
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_api_token }}"
        force_basic_auth: yes
      register: jenkins_response

    - name: Vérifier si le job a réussi
      set_fact:
        job_success: "{{ 'Finished: SUCCESS' in jenkins_response.content }}"

    - name: Afficher le statut du job
      debug:
        msg: "Le job Jenkins '{{ job_name }}' a {% if job_success %}réussi{% else %}échoué{% endif %}."

    - name: Gérer les erreurs spécifiques
      when: not job_success
      block:
        - name: Vérifier l'erreur 'interface already exists'
          set_fact:
            interface_error: "{{ 'interface already exists' in jenkins_response.content }}"

        - name: Afficher l'erreur spécifique
          debug:
            msg: "Le job a échoué car des interfaces existent déjà sur le serveur Proxmox de destination."
          when: interface_error

        - name: Mettre à jour les interfaces existantes sur Proxmox
          when: interface_error
          community.general.proxmox_nic:
            api_host: "{{ proxmox_host }}"
            api_user: "root@pam"
            api_password: "{{ lookup('env', 'PROXMOX_PASSWORD') }}"
            vmid: "{{ item.vmid }}"
            interface: "{{ item.iface }}"
            bridge: "{{ item.bridge_ports }}"
            model: "virtio"
            firewall: "{{ item.firewall | default(false) }}"
            link_down: "{{ not item.active }}"
            state: present
          loop:
            - { vmid: 100, iface: "vmbr2", bridge_ports: "", active: 1 }
            - { vmid: 100, iface: "vmbr3", bridge_ports: "", active: 1 }
            - { vmid: 100, iface: "vmbr4", bridge_ports: "", active: 1 }
            - { vmid: 100, iface: "vmbr1", bridge_ports: "", active: 1 }
            - { vmid: 100, iface: "vmbr5", bridge_ports: "", active: 1 }
            - { vmid: 100, iface: "vmbr7", bridge_ports: "", active: 1 }

        - name: Appliquer les changements réseau sur Proxmox
          command: ifreload -a
          become: yes
          when: interface_error

        - name: Suggérer les prochaines étapes
          debug:
            msg: >
              Les interfaces existantes ont été mises à jour.
              Vérifiez la configuration réseau sur le serveur Proxmox et relancez le job Jenkins si nécessaire.
          when: interface_error

    - name: Afficher un message de succès
      debug:
        msg: "Le job Jenkins s'est terminé avec succès."
      when: job_success
