- name: Vérifier le statut du job Jenkins et gérer les interfaces Proxmox
  hosts: localhost
  gather_facts: no

  vars:
    secret_path: "secret/data/data/jenkins_proxmox9"  # Corrigé avec le bon chemin
    url: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"  # URL de Vault depuis les variables d'environnement
    vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"  # Assurez-vous que le token est défini comme variable d'environnement

  tasks:
    - name: Récupérer les secrets depuis Vault
      community.hashi_vault.vault_read:
        path: "{{ secret_path }}"
        url: "{{ url }}"  # Utilisation de la variable "url" définie ci-dessus
        token: "{{ vault_token }}"
      register: secrets

    # Debugging Task: Afficher la structure des secrets récupérés
    - name: Afficher la structure des secrets récupérés
      debug:
        var: secrets

    # Vérifier si les secrets ont été récupérés avec succès
    - name: Vérifier la récupération des secrets
      fail:
        msg: "Impossible de récupérer les secrets depuis Vault."
      when: secrets is not defined or secrets.failed

    # Définir les variables sensibles à partir des données récupérées depuis Vault
    - name: Définir les variables sensibles à partir de Vault
      set_fact:
        jenkins_url: "{{ secrets.data.data.data.jenkins_url }}"  # Accéder correctement à la structure
        job_name: "{{ secrets.data.data.data.job_name }}"
        jenkins_user: "{{ secrets.data.data.data.jenkins_user }}"
        jenkins_api_token: "{{ secrets.data.data.data.jenkins_api_token }}"
        proxmox_host: "{{ secrets.data.data.data.proxmox_host }}"
        proxmox_node: "{{ secrets.data.data.data.proxmox_node }}"

    # Construire dynamiquement l'API endpoint Jenkins avec consoleText inclus
    - name: Construire dynamiquement l'API endpoint Jenkins
      set_fact:
        api_endpoint: "{{ jenkins_url }}/job/{{ job_name | urlencode }}/lastBuild/consoleText/api/json"

    # Obtenir le statut du log du job Jenkins via l'API REST
    - name: Obtenir le statut du log du job Jenkins
      uri:
        url: "{{ api_endpoint }}"
        method: GET
        return_content: yes
        status_code: 200
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_api_token }}"
        force_basic_auth: yes
      register: jenkins_response

    # Vérifier si le job a réussi en analysant la réponse JSON de Jenkins
    - name: Vérifier si le job a réussi
      set_fact:
        job_success: "{{ 'Finished: SUCCESS' in jenkins_response.content }}"

    # Afficher un message de succès si le job a réussi
    - name: Afficher un message de succès
      debug:
        msg: "Le job Jenkins '{{ job_name }}' a réussi et aucune action supplémentaire n'est nécessaire."
      when: job_success
