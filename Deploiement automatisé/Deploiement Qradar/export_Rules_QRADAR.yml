---
- name: Vérifier le statut du job Jenkins et gérer les interfaces Proxmox
  hosts: localhost
  gather_facts: no

  tasks:
    # Récupérer les secrets depuis Vault
    - name: Récupérer les secrets depuis Vault (KV v2)
      community.hashi_vault.vault_read:
        path: "secret/data/data/jenkins_proxmox3"
        url: "{{ lookup('ansible.builtin.env', 'VAULT_ADDR') }}"
        token: "{{ lookup('env', 'VAULT_TOKEN') }}"
      register: secrets

    # Vérifier si les secrets ont été récupérés avec succès
    - name: Vérifier la récupération des secrets
      fail:
        msg: "Impossible de récupérer les secrets depuis Vault."
      when: secrets is not defined or secrets.failed

    # Afficher le contenu brut des secrets récupérés pour débogage
    - name: Afficher le contenu brut des secrets récupérés
      debug:
        var: secrets

    # Définir les variables sensibles à partir des données récupérées depuis Vault
    - name: Définir les variables sensibles à partir de Vault
      set_fact:
        jenkins_url: "{{ secrets.data.data.data.jenkins_url }}"
        job_name: "{{ secrets.data.data.data.job_name }}"
        jenkins_user: "{{ secrets.data.data.data.jenkins_user }}"
        jenkins_api_token: "{{ secrets.data.data.data.jenkins_api_token }}"

    # Afficher les variables définies pour vérification
    - name: Afficher les variables sensibles définies
      debug:
        msg:
          - "Jenkins URL : {{ jenkins_url }}"
          - "Job Name : {{ job_name }}"
          - "Jenkins User : {{ jenkins_user }}"
          - "Jenkins API Token : {{ jenkins_api_token }}"

    # Construire dynamiquement l'API endpoint Jenkins avec consoleText inclus
    - name: Construire dynamiquement l'API endpoint Jenkins
      set_fact:
        api_endpoint: "{{ jenkins_url }}/job/{{ job_name | urlencode }}/lastBuild/consoleText/api/json"

    # Afficher l'API endpoint générée pour vérification
    - name: Afficher l'API endpoint générée
      debug:
        msg: "API Endpoint : {{ api_endpoint }}"

    # Obtenir le statut du job Jenkins via l'API REST
    - name: Obtenir le statut du job Jenkins
      uri:
        url: "{{ api_endpoint }}"
        method: GET
        return_content: yes
        status_code: 200
        user: "{{ jenkins_user }}"
        password: "{{ jenkins_api_token }}"
        force_basic_auth: yes
      register: jenkins_response

    # Vérifier si la requête API a réussi ou échoué (erreur HTTP)
    - name: Vérifier la réponse API Jenkins
      fail:
        msg: "Erreur lors de la requête API Jenkins : {{ jenkins_response.msg }}"
      when: jenkins_response.status != 200

    # Vérifier si le job a échoué en analysant la réponse JSON de Jenkins
    - name: Vérifier si le job a échoué
      set_fact:
        job_failed: "{{ 'FAILURE' in jenkins_response.content }}"

    # Afficher le statut du job Jenkins (réussi ou échoué)
    - name: Afficher le statut du job Jenkins
      debug:
        msg: "Le job Jenkins '{{ job_name }}' a {% if job_failed %}échoué{% else %}réussi{% endif %}."

    # Forcer l'échec du playbook si le job a échoué
    - name: Forcer l'échec du playbook si le job a échoué
      fail:
        msg: "Le job Jenkins '{{ job_name }}' a échoué."
      when: job_failed

