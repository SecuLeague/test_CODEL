---
- name: Vérification de l'installation et des versions des outils
  hosts: localhost
  gather_facts: no
  become: yes
  vars:
    vault_token: "{{ lookup('env', 'VAULT_TOKEN') }}"
    vault_addr: "{{ lookup('env', 'VAULT_ADDR') }}"

  tasks:
    - name: Lire le secret Vault
      community.hashi_vault.vault_read:
        url: "{{ vault_addr }}"
        token: "{{ vault_token }}"
        path: secret/data/vm_outils/ip
      register: vault_secret

    - name: Debug des données Vault
      debug:
        msg: "Contenu de vault_secret : {{ vault_secret }}"

    - name: Définir la variable vm_ip avec l'IP récupérée de Vault
      set_fact:
        vm_ip: "{{ vault_secret.data.data.data.value }}"

    - name: Afficher l'IP de la VM
      debug:
        msg: "L'IP de la VM est : {{ vm_ip }}"

    - name: Vérifier l'installation et la version de Git sur la VM cible
      command: git --version
      delegate_to: "{{ vm_ip }}"
      register: git_check
      ignore_errors: yes

    - name: Vérifier l'installation et la version de Java sur la VM cible
      command: java -version
      delegate_to: "{{ vm_ip }}"
      register: java_check
      ignore_errors: yes

    - name: Vérifier l'installation de Jenkins sur la VM cible
      command: systemctl is-active jenkins
      delegate_to: "{{ vm_ip }}"
      register: jenkins_check
      ignore_errors: yes
      failed_when: jenkins_check.rc not in [0, 3]

    - name: Vérifier l'installation et la version de Terraform sur la VM cible
      command: terraform -v
      delegate_to: "{{ vm_ip }}"
      register: terraform_check
      ignore_errors: yes
      failed_when: terraform_check.rc != 0
      changed_when: false

    - name: Message en cas de Terraform non installé
      debug:
        msg: "Terraform n'est pas installé ou n'est pas disponible dans le PATH."
      when: terraform_check.rc != 0

    - name: Vérifier l'installation et la version de Python sur la VM cible
      command: python3 --version
      delegate_to: "{{ vm_ip }}"
      register: python_check
      ignore_errors: yes

    - name: Vérifier l'installation et la version d'Ansible sur la VM cible
      command: ansible --version
      delegate_to: "{{ vm_ip }}"
      register: ansible_check
      ignore_errors: yes

    - name: Afficher les résultats
      debug:
        msg:
          - "Git installé: {{ git_check.rc == 0 }}"
          - "Version Git: {{ git_check.stdout if git_check.rc == 0 else 'Non installé' }}"
          - "Java installé: {{ java_check.rc == 0 }}"
          - "Version Java: {{ java_check.stderr if java_check.rc == 0 else 'Non installé' }}"
          - "Jenkins installé: {{ jenkins_check.rc == 0 }}"
          - "Statut Jenkins: {{ jenkins_check.stdout if jenkins_check.rc == 0 else 'Non installé ou inactif' }}"
          - "Terraform installé: {{ terraform_check.rc == 0 }}"
          - "Version Terraform: {{ terraform_check.stdout_lines[0] if terraform_check.rc == 0 else 'Non installé' }}"
          - "Python installé: {{ python_check.rc == 0 }}"
          - "Version Python: {{ python_check.stdout if python_check.rc == 0 else 'Non installé' }}"
          - "Ansible installé: {{ ansible_check.rc == 0 }}"
          - "Version Ansible: {{ ansible_check.stdout_lines[0] if ansible_check.rc == 0 else 'Non installé' }}"
